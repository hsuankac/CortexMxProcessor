/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2022 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */

#include <stdint.h>
#include <stdio.h>
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

/*
Write a program to execute an SVC instruction from thread mode,
implement the svc handler to print the SVC number used.
Also,  increment the SVC number by 4 and return it to the thread mode code and print it.
Hints :
1)Write a main() function where you should execute the SVC instruction with an argument.
let's say SVC #0x5
2)Implement the SVC handler
3)In the SVC handler extract the SVC number and print it using printf
4) Increment the SVC number by 4 and return it to the thread mode
*/

int main(void)
{
	__asm("SVC #8");
    /* Loop forever */
	for(;;);
}

__attribute__((naked)) void SVC_Handler(void)
{
	__asm("MRS R0, MSP");
	__asm("B SVC_Handler_c");

}

void SVC_Handler_c(uint32_t *pBaseStackFrame)
{
	printf("In SVC handler\n");
	uint8_t *pReturn_addr = (uint8_t*)pBaseStackFrame[6];

	// Decrement the return address by 2 to point to the opcode of the SVC instruction in the program memory
	pReturn_addr -= 2;

	uint8_t svc_number = *pReturn_addr;
	printf("SVC number is: %d\n", svc_number);

	svc_number += 4;

}
